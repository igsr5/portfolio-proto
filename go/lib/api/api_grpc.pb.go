// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/api.proto

package api_pb

import (
	rss_feed "/blogs/rss_feed"
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortfolioBackendApiClient is the client API for PortfolioBackendApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioBackendApiClient interface {
	CreateRSSFeed(ctx context.Context, in *rss_feed.CreateRSSFeedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type portfolioBackendApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioBackendApiClient(cc grpc.ClientConnInterface) PortfolioBackendApiClient {
	return &portfolioBackendApiClient{cc}
}

func (c *portfolioBackendApiClient) CreateRSSFeed(ctx context.Context, in *rss_feed.CreateRSSFeedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/CreateRSSFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioBackendApiServer is the server API for PortfolioBackendApi service.
// All implementations must embed UnimplementedPortfolioBackendApiServer
// for forward compatibility
type PortfolioBackendApiServer interface {
	CreateRSSFeed(context.Context, *rss_feed.CreateRSSFeedRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPortfolioBackendApiServer()
}

// UnimplementedPortfolioBackendApiServer must be embedded to have forward compatible implementations.
type UnimplementedPortfolioBackendApiServer struct {
}

func (UnimplementedPortfolioBackendApiServer) CreateRSSFeed(context.Context, *rss_feed.CreateRSSFeedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRSSFeed not implemented")
}
func (UnimplementedPortfolioBackendApiServer) mustEmbedUnimplementedPortfolioBackendApiServer() {}

// UnsafePortfolioBackendApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioBackendApiServer will
// result in compilation errors.
type UnsafePortfolioBackendApiServer interface {
	mustEmbedUnimplementedPortfolioBackendApiServer()
}

func RegisterPortfolioBackendApiServer(s grpc.ServiceRegistrar, srv PortfolioBackendApiServer) {
	s.RegisterService(&PortfolioBackendApi_ServiceDesc, srv)
}

func _PortfolioBackendApi_CreateRSSFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rss_feed.CreateRSSFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).CreateRSSFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/CreateRSSFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).CreateRSSFeed(ctx, req.(*rss_feed.CreateRSSFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioBackendApi_ServiceDesc is the grpc.ServiceDesc for PortfolioBackendApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioBackendApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portfolio.PortfolioBackendApi",
	HandlerType: (*PortfolioBackendApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRSSFeed",
			Handler:    _PortfolioBackendApi_CreateRSSFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
