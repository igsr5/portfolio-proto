// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/api.proto

package api_pb

import (
	blogs "/blogs"
	rss_feed "/blogs/rss_feed"
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortfolioBackendApiClient is the client API for PortfolioBackendApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioBackendApiClient interface {
	// For RSS Feed ========================
	CreateRSSFeed(ctx context.Context, in *rss_feed.CreateRSSFeedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BatchGetRSSFeeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rss_feed.BatchGetRSSFeedsResponse, error)
	GetRSSFeed(ctx context.Context, in *rss_feed.GetRSSFeedRequest, opts ...grpc.CallOption) (*rss_feed.GetRSSFeedResponse, error)
	DeleteRSSFeed(ctx context.Context, in *rss_feed.DeleteRSSFeedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// For Blog ============================
	CreateBlog(ctx context.Context, in *blogs.CreateBlogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BatchGetBlogs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*blogs.BatchGetBlogsResponse, error)
	GetBlog(ctx context.Context, in *blogs.GetBlogRequest, opts ...grpc.CallOption) (*blogs.GetBlogResponse, error)
	DeleteBlog(ctx context.Context, in *blogs.DeleteBlogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type portfolioBackendApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioBackendApiClient(cc grpc.ClientConnInterface) PortfolioBackendApiClient {
	return &portfolioBackendApiClient{cc}
}

func (c *portfolioBackendApiClient) CreateRSSFeed(ctx context.Context, in *rss_feed.CreateRSSFeedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/CreateRSSFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioBackendApiClient) BatchGetRSSFeeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rss_feed.BatchGetRSSFeedsResponse, error) {
	out := new(rss_feed.BatchGetRSSFeedsResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/BatchGetRSSFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioBackendApiClient) GetRSSFeed(ctx context.Context, in *rss_feed.GetRSSFeedRequest, opts ...grpc.CallOption) (*rss_feed.GetRSSFeedResponse, error) {
	out := new(rss_feed.GetRSSFeedResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/GetRSSFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioBackendApiClient) DeleteRSSFeed(ctx context.Context, in *rss_feed.DeleteRSSFeedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/DeleteRSSFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioBackendApiClient) CreateBlog(ctx context.Context, in *blogs.CreateBlogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/CreateBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioBackendApiClient) BatchGetBlogs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*blogs.BatchGetBlogsResponse, error) {
	out := new(blogs.BatchGetBlogsResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/BatchGetBlogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioBackendApiClient) GetBlog(ctx context.Context, in *blogs.GetBlogRequest, opts ...grpc.CallOption) (*blogs.GetBlogResponse, error) {
	out := new(blogs.GetBlogResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/GetBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioBackendApiClient) DeleteBlog(ctx context.Context, in *blogs.DeleteBlogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioBackendApi/DeleteBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioBackendApiServer is the server API for PortfolioBackendApi service.
// All implementations must embed UnimplementedPortfolioBackendApiServer
// for forward compatibility
type PortfolioBackendApiServer interface {
	// For RSS Feed ========================
	CreateRSSFeed(context.Context, *rss_feed.CreateRSSFeedRequest) (*empty.Empty, error)
	BatchGetRSSFeeds(context.Context, *empty.Empty) (*rss_feed.BatchGetRSSFeedsResponse, error)
	GetRSSFeed(context.Context, *rss_feed.GetRSSFeedRequest) (*rss_feed.GetRSSFeedResponse, error)
	DeleteRSSFeed(context.Context, *rss_feed.DeleteRSSFeedRequest) (*empty.Empty, error)
	// For Blog ============================
	CreateBlog(context.Context, *blogs.CreateBlogRequest) (*empty.Empty, error)
	BatchGetBlogs(context.Context, *empty.Empty) (*blogs.BatchGetBlogsResponse, error)
	GetBlog(context.Context, *blogs.GetBlogRequest) (*blogs.GetBlogResponse, error)
	DeleteBlog(context.Context, *blogs.DeleteBlogRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPortfolioBackendApiServer()
}

// UnimplementedPortfolioBackendApiServer must be embedded to have forward compatible implementations.
type UnimplementedPortfolioBackendApiServer struct {
}

func (UnimplementedPortfolioBackendApiServer) CreateRSSFeed(context.Context, *rss_feed.CreateRSSFeedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRSSFeed not implemented")
}
func (UnimplementedPortfolioBackendApiServer) BatchGetRSSFeeds(context.Context, *empty.Empty) (*rss_feed.BatchGetRSSFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetRSSFeeds not implemented")
}
func (UnimplementedPortfolioBackendApiServer) GetRSSFeed(context.Context, *rss_feed.GetRSSFeedRequest) (*rss_feed.GetRSSFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRSSFeed not implemented")
}
func (UnimplementedPortfolioBackendApiServer) DeleteRSSFeed(context.Context, *rss_feed.DeleteRSSFeedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRSSFeed not implemented")
}
func (UnimplementedPortfolioBackendApiServer) CreateBlog(context.Context, *blogs.CreateBlogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedPortfolioBackendApiServer) BatchGetBlogs(context.Context, *empty.Empty) (*blogs.BatchGetBlogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetBlogs not implemented")
}
func (UnimplementedPortfolioBackendApiServer) GetBlog(context.Context, *blogs.GetBlogRequest) (*blogs.GetBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlog not implemented")
}
func (UnimplementedPortfolioBackendApiServer) DeleteBlog(context.Context, *blogs.DeleteBlogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedPortfolioBackendApiServer) mustEmbedUnimplementedPortfolioBackendApiServer() {}

// UnsafePortfolioBackendApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioBackendApiServer will
// result in compilation errors.
type UnsafePortfolioBackendApiServer interface {
	mustEmbedUnimplementedPortfolioBackendApiServer()
}

func RegisterPortfolioBackendApiServer(s grpc.ServiceRegistrar, srv PortfolioBackendApiServer) {
	s.RegisterService(&PortfolioBackendApi_ServiceDesc, srv)
}

func _PortfolioBackendApi_CreateRSSFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rss_feed.CreateRSSFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).CreateRSSFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/CreateRSSFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).CreateRSSFeed(ctx, req.(*rss_feed.CreateRSSFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioBackendApi_BatchGetRSSFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).BatchGetRSSFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/BatchGetRSSFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).BatchGetRSSFeeds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioBackendApi_GetRSSFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rss_feed.GetRSSFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).GetRSSFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/GetRSSFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).GetRSSFeed(ctx, req.(*rss_feed.GetRSSFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioBackendApi_DeleteRSSFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rss_feed.DeleteRSSFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).DeleteRSSFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/DeleteRSSFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).DeleteRSSFeed(ctx, req.(*rss_feed.DeleteRSSFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioBackendApi_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(blogs.CreateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/CreateBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).CreateBlog(ctx, req.(*blogs.CreateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioBackendApi_BatchGetBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).BatchGetBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/BatchGetBlogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).BatchGetBlogs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioBackendApi_GetBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(blogs.GetBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).GetBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/GetBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).GetBlog(ctx, req.(*blogs.GetBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioBackendApi_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(blogs.DeleteBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioBackendApiServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioBackendApi/DeleteBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioBackendApiServer).DeleteBlog(ctx, req.(*blogs.DeleteBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioBackendApi_ServiceDesc is the grpc.ServiceDesc for PortfolioBackendApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioBackendApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portfolio.PortfolioBackendApi",
	HandlerType: (*PortfolioBackendApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRSSFeed",
			Handler:    _PortfolioBackendApi_CreateRSSFeed_Handler,
		},
		{
			MethodName: "BatchGetRSSFeeds",
			Handler:    _PortfolioBackendApi_BatchGetRSSFeeds_Handler,
		},
		{
			MethodName: "GetRSSFeed",
			Handler:    _PortfolioBackendApi_GetRSSFeed_Handler,
		},
		{
			MethodName: "DeleteRSSFeed",
			Handler:    _PortfolioBackendApi_DeleteRSSFeed_Handler,
		},
		{
			MethodName: "CreateBlog",
			Handler:    _PortfolioBackendApi_CreateBlog_Handler,
		},
		{
			MethodName: "BatchGetBlogs",
			Handler:    _PortfolioBackendApi_BatchGetBlogs_Handler,
		},
		{
			MethodName: "GetBlog",
			Handler:    _PortfolioBackendApi_GetBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _PortfolioBackendApi_DeleteBlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
